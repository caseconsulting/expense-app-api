#!/usr/bin/env node

const aurora = require('expense-app-db');
const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
const Logger = require('../js/Logger');

// Get port from environment and store in Express.
const port = normalizePort(process.env.EXPRESS_PORT || '3000');
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

/**
 * Starts the server
 */
async function start() {
  const auroraLogger = new Logger('expense-app-db');
  await aurora.initialize({
    log: auroraLogger.log.bind(auroraLogger)
  });

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

/**
 * Normalizes a port into a number, string, or false.
 * @returns {number | string | boolean}
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('listening on port ', port);
}

start();
