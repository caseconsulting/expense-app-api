{
  "name": "expense-app-api",
  "version": "3.15.0",
  "private": true,
  "scripts": {
    "chronos": "node -e 'require(\"./chronos\").start()'",
    "claudia": "claudia",
    "create:claudia:dev": "node ./generateEnvJson.js && claudia create --handler lambda.handler --deploy-proxy-api --region us-east-1 --name expense-app-api-dev --runtime nodejs18.x --set-env-from-json ./env-variables.json --role expense-api-lambda-dev",
    "create:claudia:prod": "node ./generateEnvJson.js && claudia create --handler lambda.handler --deploy-proxy-api --region us-east-1 --name expense-app-api-prod --runtime nodejs18.x --set-env-from-json ./env-variables.json --role expense-api-lambda-prod",
    "create:claudia:test": "node ./generateEnvJson.js && claudia create --handler lambda.handler --deploy-proxy-api --region us-east-1 --name expense-app-api-test --runtime nodejs18.x --set-env-from-json ./env-variables.json --role expense-api-lambda-test",
    "debug": "nodemon --trace-warnings --inspect bin/www",
    "deploy:cloudformation:dev": "aws cloudformation deploy --template-file packaged.yaml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --stack-name expense-app-dev --region us-east-1",
    "deploy:cloudformation:prod": "aws cloudformation deploy --template-file packaged.yaml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --stack-name expense-app-prod --region us-east-1",
    "deploy:cloudformation:test": "aws cloudformation deploy --template-file packaged.yaml --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM --stack-name expense-app-test --region us-east-1",
    "deploy:claudia": "npm run update",
    "deploy:claudia:prod": "npm run update:prod",
    "predeploy:dev": "npm run download:dev",
    "deploy:dev": "npm run deploy:claudia && npm run tag:dev && npm run package:cloudformation:dev && npm run deploy:cloudformation:dev",
    "postdeploy:dev": "npm run download:local:env",
    "predeploy:prod": "export AWS_PROFILE=prod && npm run download:prod",
    "deploy:prod": "npm run deploy:claudia:prod && npm run tag:prod && npm run package:cloudformation:prod && npm run deploy:cloudformation:prod",
    "postdeploy:prod": "export AWS_PROFILE=default && npm run download:local:env",
    "predeploy:test": "npm run download:test",
    "deploy:test": "npm run deploy:claudia && npm run tag:test && npm run package:cloudformation:test && npm run deploy:cloudformation:test",
    "postdeploy:test": "npm run download:local:env",
    "destroy": "claudia destroy",
    "download:dev": "npm run download:dev:env && npm run download:dev:claudia",
    "download:dev:claudia": "aws s3 cp s3://case-expense-app-resources-dev/claudia.json claudia.json",
    "download:dev:env": "echo .env chronos/.env chiron/.env mifiStatus/.env thanos/.env | xargs -n 1 aws s3 cp s3://case-expense-app-resources-dev/.env",
    "download:local:env": "echo .env chronos/.env chiron/.env mifiStatus/.env thanos/.env | xargs -n 1 aws s3 cp s3://case-expense-app-resources-local/.env",
    "download:prod": "npm run download:prod:env && npm run download:prod:claudia",
    "download:prod:claudia": "aws s3 cp s3://case-consulting-expense-app-resources-prod/claudia.json claudia.json",
    "download:prod:env": "echo .env chronos/.env chiron/.env mifiStatus/.env thanos/.env | xargs -n 1 aws s3 cp s3://case-consulting-expense-app-resources-prod/.env",
    "download:test": "npm run download:test:env && npm run download:test:claudia",
    "download:test:claudia": "aws s3 cp s3://case-expense-app-resources-test/claudia.json claudia.json",
    "download:test:env": "echo .env chronos/.env chiron/.env mifiStatus/.env thanos/.env | xargs -n 1 aws s3 cp s3://case-expense-app-resources-test/.env",
    "employeeScripts:dev": "node ./js/Scripts/employeeScripts.js dev",
    "employeeScripts:prod": "node ./js/Scripts/employeeScripts.js prod",
    "employeeScripts:test": "node ./js/Scripts/employeeScripts.js test",
    "eslint": "eslint . --ext .js --ignore-path .jshintignore --fix",
    "invoke:chiron": "sam local invoke ChironFunction --env-vars env.json --no-event --template CloudFormation.yaml",
    "invoke:chronos": "sam local invoke ChronosFunction --env-vars env.json --no-event --template CloudFormation.yaml",
    "invoke:mifiStatus": "sam local invoke MifiStatusFunction --env-vars env.json --no-event --template CloudFormation.yaml",
    "invoke:thanos": "sam local invoke ThanosFunction --env-vars env.json --no-event --template CloudFormation.yaml",
    "lint": "npm run eslint",
    "package:cloudformation:dev": "aws cloudformation package --template-file CloudFormation.yaml --s3-bucket case-expense-app-resources-dev --s3-prefix expense-app-api --output-template-file packaged.yaml",
    "package:cloudformation:prod": "aws cloudformation package --template-file CloudFormation.yaml --s3-bucket case-consulting-expense-app-resources-prod --s3-prefix expense-app-api --output-template-file packaged.yaml",
    "package:cloudformation:test": "aws cloudformation package --template-file CloudFormation.yaml --s3-bucket case-expense-app-resources-test --s3-prefix expense-app-api --output-template-file packaged.yaml",
    "pm2": "pm2",
    "pm2:kill": "pm2 kill",
    "pm2:list": "pm2 list",
    "pm2:monit": "pm2 monit",
    "precommit": "npm run eslint && npm run test",
    "receiptSync:dev": "node ./js/Scripts/ReceiptSync.js dev",
    "receiptSync:prod": "node ./js/Scripts/ReceiptSync.js prod",
    "receiptSync:test": "node ./js/Scripts/ReceiptSync.js test",
    "reinstall": "npm ci && cd dependencies/nodejs && npm ci",
    "postreinstall": "rm -rf node_modules/claudia/node_modules/aws-sdk",
    "restart": "pm2 restart services.yml",
    "start": "pm2 start services.yml",
    "stop": "pm2 stop services.yml",
    "tag:dev": "claudia tag --tags Application=expense-app,Stage=dev",
    "tag:prod": "claudia tag --tags Application=expense-app,Stage=prod",
    "tag:test": "claudia tag --tags Application=expense-app,Stage=test",
    "test": "jasmine",
    "test-coverage": "nyc --reporter=text --reporter=html --exclude=spec/** jasmine",
    "testLambdaLocal": "node testLocalScript.js",
    "update": "node ./generateEnvJson.js && claudia update --runtime nodejs18.x --update-env-from-json ./env-variables.json --timeout 60",
    "update:prod": "node ./generateEnvJson.js && claudia update --runtime nodejs18.x --update-env-from-json ./env-variables.json --timeout 60",
    "upload:local:env": "aws s3 cp .env s3://case-expense-app-resources-local/.env --sse",
    "upload:dev:claudia": "aws s3 cp claudia.json s3://case-expense-app-resources-dev/claudia.json --sse",
    "upload:dev:env": "aws s3 cp .env s3://case-expense-app-resources-dev/.env --sse",
    "upload:prod:claudia": "aws s3 cp claudia.json s3://case-consulting-expense-app-resources-prod/claudia.json --sse",
    "upload:prod:env": "aws s3 cp .env s3://case-consulting-expense-app-resources-prod/.env --sse",
    "upload:test:claudia": "aws s3 cp claudia.json s3://case-expense-app-resources-test/claudia.json --sse",
    "upload:test:env": "aws s3 cp .env s3://case-expense-app-resources-test/.env --sse",
    "validate": "npm ls"
  },
  "dependencies": {
    "atob": "2.1.2",
    "aws-sdk": "2.1413.0",
    "aws-serverless-express": "3.4.0",
    "axios": "0.27.2",
    "axios-oauth-client": "1.5.0",
    "body-parser": "1.20.2",
    "cookie-parser": "1.4.6",
    "cors": "2.8.5",
    "dayjs": "1.11.9",
    "dotenv": "8.6.0",
    "express": "4.18.2",
    "express-jwt": "6.1.2",
    "got": "11.8.6",
    "jwks-rsa": "2.1.5",
    "lodash": "4.17.21",
    "metadata-scraper": "0.2.61",
    "morgan": "1.10.0",
    "multer": "1.4.4",
    "multer-s3": "2.10.0",
    "pm2": "5.3.0",
    "pug": "^3.0.2",
    "readline-sync": "1.4.10"
  },
  "devDependencies": {
    "acorn": "8.10.0",
    "aws-sdk-mock": "5.8.0",
    "claudia": "git+https://github.com/claudiajs/claudia.git#pull/230/head",
    "eslint": "8.44.0",
    "jasmine": "3.99.0",
    "nodemon": "2.0.22",
    "nyc": "15.1.0",
    "precommit-hook": "3.0.0"
  },
  "pre-commit": [
    "eslint",
    "test"
  ]
}
