AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation for expense app

Parameters:
  Stage:
    Type: String
    Description: Deployment environment (e.g., dev, test, or prod)
    AllowedValues:
      - dev
      - test
      - prod
  AppCertificate:
    Description: The ARN for the app certificate saved in ACM
    Type: String
    ConstraintDescription: must be the name of an existing certificate.
  ApiCertificate:
    Description: The ARN for the api certificate saved in ACM
    Type: String
    ConstraintDescription: must be the name of an existing certificate.
  AppDomain:
    Description: The domain name for the front end app
    Type: String
    ConstraintDescription: Must match app certificate name
    AllowedValues:
      - dev-app.consultwithcase.com
      - test-app.consultwithcase.com
      - app.consultwithcase.com

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: nodejs18.x
    Tags:
      Application: expense-app
      Stage: !Ref Stage

Conditions:
  ProdDeployment: !Equals
    - !Ref Stage
    - prod

Resources:
  cloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Join
          - ''
          - - expense-app-oai-
            - !Ref Stage
  cloudFrontDistribution:
    DependsOn:
      - s3FrontEndBucketPolicy
      - s3Logs
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt
              - s3FrontEnd
              - DomainName
            Id: !If
              - ProdDeployment
              - S3-case-consulting-expense-app-prod
              - !Join
                - ''
                - - S3-case-expense-app-
                  - !Ref Stage
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref cloudFrontOriginAccessIdentity
        Enabled: 'true'
        Comment: Expense App
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: 'false'
          Bucket: !GetAtt
            - s3Logs
            - DomainName
          Prefix: cf-logs/
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !If
            - ProdDeployment
            - S3-case-consulting-expense-app-prod
            - !Join
              - ''
              - - S3-case-expense-app-
                - !Ref Stage
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        HttpVersion: http2
        CustomErrorResponses:
          - ErrorCode: '404'
            ResponsePagePath: '/index.html'
            ResponseCode: '200'
            ErrorCachingMinTTL: '300'
          - ErrorCode: '403'
            ResponsePagePath: '/index.html'
            ResponseCode: '200'
            ErrorCachingMinTTL: '300'
        ViewerCertificate:
          AcmCertificateArn: !Ref AppCertificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Aliases:
          - !Ref AppDomain
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  s3FrontEnd:
    DependsOn: s3Logs
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If
        - ProdDeployment
        - case-consulting-expense-app-prod
        - !Join
          - ''
          - - case-expense-app-
            - !Ref Stage
      LoggingConfiguration:
        DestinationBucketName: !Ref s3Logs
        LogFilePrefix: s3-logs/app/
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  s3FrontEndBucketPolicy:
    DependsOn:
      - s3FrontEnd
      - cloudFrontOriginAccessIdentity
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref s3FrontEnd
      PolicyDocument:
        Statement:
          - Sid: >-
              Grant a CloudFront Origin Identity access to support private
              content
            Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref s3FrontEnd
                - /*
            Principal:
              CanonicalUser: !GetAtt
                - cloudFrontOriginAccessIdentity
                - S3CanonicalUserId
  s3Resources:
    DependsOn: s3Logs
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If
        - ProdDeployment
        - case-consulting-expense-app-resources-prod
        - !Join
          - ''
          - - case-expense-app-resources-
            - !Ref Stage
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref s3Logs
        LogFilePrefix: s3-logs/resources/
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  s3Attachments:
    DependsOn: s3Logs
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If
        - ProdDeployment
        - case-consulting-expense-app-attachments-prod
        - !Join
          - ''
          - - case-expense-app-attachments-
            - !Ref Stage
      LifecycleConfiguration:
        Rules:
          - Id: Remove Deleted Expense Attachments
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref s3Logs
        LogFilePrefix: s3-logs/attachments/
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  s3Resumes:
    DependsOn: s3Logs
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !If
        - ProdDeployment
        - case-consulting-expense-app-resumes-prod
        - !Join
          - ''
          - - case-expense-app-resumes-
            - !Ref Stage
      LifecycleConfiguration:
        Rules:
          - Id: Remove Deleted Expense Resumes
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref s3Logs
        LogFilePrefix: s3-logs/resumes/
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Application
          Value: portal
        - Key: Stage
          Value: !Ref Stage
  s3Logs:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !If
        - ProdDeployment
        - case-consulting-expense-app-logs-prod
        - !Join
          - ''
          - - case-expense-app-logs-
            - !Ref Stage
      LifecycleConfiguration:
        Rules:
          - Id: Purge old log files
            ExpirationInDays: 30
            Status: Enabled
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  employeeTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - employees
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: email-index
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  employeeSensitiveTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - employees-sensitive
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      SSESpecification:
        KMSMasterKeyId: alias/employees-sensitive-key
        SSEEnabled: true
        SSEType: KMS
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  auditTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - audits
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: dateCreated
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: type-dateCreated-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: dateCreated
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  expenseTypeTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - expense-types
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  trainingURLTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - training-urls
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: category
          KeyType: RANGE
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  expenseTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - expenses
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: expenseTypeId
          AttributeType: S
        - AttributeName: employeeId
          AttributeType: S
        - AttributeName: purchaseDate
          AttributeType: S
        - AttributeName: reimbursedDate
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: employeeId-index
          KeySchema:
            - AttributeName: employeeId
              KeyType: HASH
            - AttributeName: purchaseDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: expenseTypeId-index
          KeySchema:
            - AttributeName: expenseTypeId
              KeyType: HASH
            - AttributeName: purchaseDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: employeeId-expenseTypeId-index
          KeySchema:
            - AttributeName: employeeId
              KeyType: HASH
            - AttributeName: expenseTypeId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: expenseTypeId-reimbursedDate-index
          KeySchema:
            - AttributeName: expenseTypeId
              KeyType: HASH
            - AttributeName: reimbursedDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  budgetsTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - budgets
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: expenseTypeId
          AttributeType: S
        - AttributeName: employeeId
          AttributeType: S
        - AttributeName: fiscalEndDate
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: expenseTypeId-index
          KeySchema:
            - AttributeName: expenseTypeId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: employeeId-expenseTypeId-index
          KeySchema:
            - AttributeName: employeeId
              KeyType: HASH
            - AttributeName: expenseTypeId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: fiscalEndDate-index
          KeySchema:
            - AttributeName: fiscalEndDate
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  contractTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      TableName: !Join
        - '-'
        - - !Ref Stage
          - contracts
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: contractName
          AttributeType: S
        - AttributeName: primeName
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: contractName-index
          KeySchema:
            - AttributeName: contractName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: primeName-index
          KeySchema:
            - AttributeName: primeName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: contractName-primeName-index
          KeySchema:
            - AttributeName: contractName
              KeyType: HASH
            - AttributeName: primeName
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  ExpenseAppApiLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - ''
        - - expense-api-lambda-
          - !Ref Stage
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: TextExtract
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'textract:*'
                Resource: '*'
        - PolicyName: Comprehend
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'comprehend:*'
                Resource: '*'
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'dynamodb:*'
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: '*'
        - PolicyName: LambdaInvoke
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:Invoke*'
                Resource: '*'
        - PolicyName: AmazonRekognition
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'rekognition:*'
                Resource: '*'
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  ChronosFunction:
    Type: 'AWS::Serverless::Function' # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Provides the nightly update to employee budgets.
      Handler: chronos.handler
      Layers:
        - !Ref DependenciesLayer
      Timeout: 900
      CodeUri: ./chronos
      Events:
        ChronosSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(1 5 * * ? *)
      Environment:
        Variables:
          STAGE: !Ref Stage
      Role: !GetAtt
        - ExpenseAppApiLambdaRole
        - Arn
  ThanosFunction:
    Type: 'AWS::Serverless::Function' # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Updates employee data that is listed as 'current' (supports technology only atm)
      Handler: thanos.handler
      Layers:
        - !Ref DependenciesLayer
      Timeout: 900
      CodeUri: ./thanos
      Events:
        ThanosSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(1 5 1 * ? *)
      Environment:
        Variables:
          STAGE: !Ref Stage
      Role: !GetAtt
        - ExpenseAppApiLambdaRole
        - Arn
  ChironLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - ''
        - - expense-api-lambda-chiron-
          - !Ref Stage
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'dynamodb:*'
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: '*'
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  ChironFunction:
    Type: 'AWS::Serverless::Function' # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: Provides the nightly update to training section with extracted expense data.
      Handler: chiron.handler
      Layers:
        - !Ref DependenciesLayer
        - !Ref ExpenseModelLayer
      Timeout: 900
      MemorySize: 256
      CodeUri: chiron/
      Events:
        ChironSchedule:
          Type: Schedule
          Properties:
            Schedule: cron(1 5 * * ? *)
      Environment:
        Variables:
          STAGE: !Ref Stage
      Role: !GetAtt
        - ChironLambdaRole
        - Arn
  MifiStatusLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join
        - ''
        - - expense-api-lambda-mifi-status-
          - !Ref Stage
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DynamoDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'dynamodb:*'
                Resource: '*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: '*'
        - PolicyName: SNS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'sns:*'
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
      Tags:
        - Key: Application
          Value: expense-app
        - Key: Stage
          Value: !Ref Stage
  MifiStatusFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Publishes sns message based on if mifiStatus changed for employee
      Handler: mifiStatus.handler
      Layers:
        - !Ref DependenciesLayer
      Timeout: 900
      MemorySize: 256
      CodeUri: ./mifiStatus
      Events:
        MifiStream:
          Type: DynamoDB
          Properties:
            StartingPosition: TRIM_HORIZON
            Stream: !GetAtt employeeTable.StreamArn
      Environment:
        Variables:
          STAGE: !Ref Stage
          MifiTopicArn: !Ref MifiTopic
      Role: !GetAtt
        - MifiStatusLambdaRole
        - Arn
  MifiTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: 'Mifi status change'
      TopicName: !Join
        - ''
        - - mifi-status-
          - !Ref Stage
  ExpenseModelLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Join
        - ''
        - - expense-api-expense-model-
          - !Ref Stage
      Description: Model for an expense.
      ContentUri: expense-model/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Retain
  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Join
        - ''
        - - expense-api-dependencies-
          - !Ref Stage
      Description: Packages for lambda functions.
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Retain
